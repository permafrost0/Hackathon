!pip install pandas torch transformers

-----------------------------------------
    ファイル名要チェック
-----------------------------------------

import pandas as pd

# 評価データの読み込み
score_df = pd.read_csv('score.csv')

# レビューデータの読み込み
with open('review.txt', 'r') as file:
    reviews = file.readlines()

# スコアの重みづけ
def weight_score(score):
    if score == 4:
        return score * 2
    elif score == 3:
        return score * 1.5
    elif score == 2:
        return score * 1
    return 0

# スコアに重みづけを適用
score_df['weighted_score'] = score_df['score'].apply(weight_score)

# 重みづけされたスコアとレビューをペアリング
data = pd.DataFrame({
    'score': score_df['weighted_score'],
    'review': reviews
})

# データの表示
data.head()

----------------------------------------------

from transformers import GPT2Tokenizer

# トークナイザーのロード
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')

# パディングトークンを設定
tokenizer.pad_token = tokenizer.eos_token


----------------------------------------------


from torch.utils.data import Dataset, DataLoader
import torch

class ReviewDataset(Dataset):
    def __init__(self, data, tokenizer):
        self.data = data
        self.tokenizer = tokenizer

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        score = str(self.data.iloc[idx, 0])
        review = str(self.data.iloc[idx, 1])
        inputs = self.tokenizer.encode(f'{score} <|review|> {review}', return_tensors='pt', max_length=512, truncation=True)
        return inputs.squeeze(), inputs.squeeze()

# データセットのインスタンス作成
dataset = ReviewDataset(data, tokenizer)

# カスタムcollate関数の定義
def collate_fn(batch):
    inputs, labels = zip(*batch)
    inputs = torch.nn.utils.rnn.pad_sequence(inputs, batch_first=True, padding_value=tokenizer.pad_token_id)
    labels = torch.nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=tokenizer.pad_token_id)
    return inputs, labels

# データローダーの作成
dataloader = DataLoader(dataset, batch_size=2, shuffle=True, collate_fn=collate_fn)


-------------------------------------------------------


import torch
from transformers import GPT2LMHeadModel, AdamW

# モデルのロード
model = GPT2LMHeadModel.from_pretrained('gpt2')

# デバイスの設定 (GPUが利用可能ならGPUを使用)
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

# オプティマイザの定義
optimizer = AdamW(model.parameters(), lr=5e-5)

# トレーニングループ
model.train()
num_epochs = 3

for epoch in range(num_epochs):
    for batch in dataloader:
        inputs, labels = batch
        inputs = inputs.to(device)
        labels = labels.to(device)

        optimizer.zero_grad()
        outputs = model(inputs, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()

        print(f'Epoch: {epoch}, Loss: {loss.item()}')


-------------------------------------------------------
    出力
-------------------------------------------------------

import torch

# モデルをpklファイルとして保存
model_path = "model.pkl"
torch.save(model.state_dict(), model_path)


-------------------------------------------------------
    テスト
-------------------------------------------------------

def generate_review(score):
    prompt = f'{score} <|review|>'
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    inputs = inputs.to(device)
    outputs = model.generate(inputs, max_length=50, num_return_sequences=1)
    review = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return review

# 任意の評価に対するレビューを生成
score = 1
generated_review = generate_review(score)
print(f'Generated review for score {score}: {generated_review}')